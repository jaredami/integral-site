{"version":3,"sources":["images sync /^/.*/-circle/.png$","images/beige-circle.png","images/blue-circle.png","images/green-circle.png","images/orange-circle.png","images/purple-circle.png","images/red-circle.png","images/turquoise-circle.png","images/yellow-circle.png","StageInfo.js","Circles.js","App.js","serviceWorker.js","index.js"],"names":["map","./beige-circle.png","./blue-circle.png","./green-circle.png","./orange-circle.png","./purple-circle.png","./red-circle.png","./turquoise-circle.png","./yellow-circle.png","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","p","StageInfo","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hoveredColor","none","stage","name","beige","purple","red","blue","orange","green","yellow","turquoise","getStageInfo","bind","assertThisInitialized","prevProps","color","setState","colorName","react_default","a","createElement","concat","className","Component","Circles","spacing","Math","PI","start","radius","xcenter","window","innerWidth","ycenter","step","intervalTime","topVal","leftVal","getTop","getLeft","handleMouseEnter","handleMouseLeave","moveit","interval","setInterval","console","log","_this2","document","querySelectorAll","forEach","circle","pos","parseFloat","dataset","setAttribute","floor","sin","style","top","cos","left","target","querySelector","opacity","clearInterval","_this3","images","key","data-pos","src","require","alt","onMouseEnter","onMouseLeave","src_StageInfo","App","Fade_default","src_Circles","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.482df35a.chunk.js","sourcesContent":["var map = {\n\t\"./beige-circle.png\": 21,\n\t\"./blue-circle.png\": 22,\n\t\"./green-circle.png\": 23,\n\t\"./orange-circle.png\": 24,\n\t\"./purple-circle.png\": 25,\n\t\"./red-circle.png\": 26,\n\t\"./turquoise-circle.png\": 27,\n\t\"./yellow-circle.png\": 28\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 20;","module.exports = __webpack_public_path__ + \"static/media/beige-circle.c7e2c051.png\";","module.exports = __webpack_public_path__ + \"static/media/blue-circle.f8510e61.png\";","module.exports = __webpack_public_path__ + \"static/media/green-circle.a246e40c.png\";","module.exports = __webpack_public_path__ + \"static/media/orange-circle.6624eacb.png\";","module.exports = __webpack_public_path__ + \"static/media/purple-circle.47d3ae16.png\";","module.exports = __webpack_public_path__ + \"static/media/red-circle.76abbd8d.png\";","module.exports = __webpack_public_path__ + \"static/media/turquoise-circle.6024db70.png\";","module.exports = __webpack_public_path__ + \"static/media/yellow-circle.8c743b4a.png\";","import React, { Component } from \"react\";\r\n\r\nclass StageInfo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { hoveredColor: \"none\" };\r\n    this.StageInfo = {\r\n      none: { stage: \"\", name: \"\" },\r\n      beige: { stage: \"Stage 1: Beige\", name: \"Survival Sense\" },\r\n      purple: { stage: \"Stage 2: Purple\", name: \"Tribal Order\" },\r\n      red: { stage: \"Stage 3: Red\", name: \"Power Self\" },\r\n      blue: { stage: \"Stage 4: Blue\", name: \"Absolute Order\" },\r\n      orange: { stage: \"Stage 5: Orange\", name: \"Enterprising Self\" },\r\n      green: { stage: \"Stage 6: Green\", name: \"Egalitarian Order\" },\r\n      yellow: { stage: \"Stage 7: Yellow\", name: \"Integrated Self\" },\r\n      turquoise: { stage: \"Stage 8: Turquoise\", name: \"Global Order\" }\r\n    };\r\n\r\n    this.getStageInfo = this.getStageInfo.bind(this);\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    // if the color hovered over is different from the last color hovered over, set the color prop to that color\r\n    if (this.props.color !== prevProps.color) {\r\n      this.setState({\r\n        hoveredColor: this.props.color\r\n      });\r\n    }\r\n  }\r\n\r\n  getStageInfo() {\r\n    let colorName = this.state.hoveredColor;\r\n    return (\r\n      <div>\r\n        <h1>{this.StageInfo[`${colorName}`].stage}</h1>\r\n        <h2>{this.StageInfo[`${colorName}`].name}</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"color-info\">{this.getStageInfo()}</div>;\r\n  }\r\n}\r\n\r\nexport default StageInfo;\r\n","import React, { Component } from \"react\";\r\nimport StageInfo from \"./StageInfo\";\r\n\r\nclass Circles extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.spacing = (2 * Math.PI) / 8;\r\n    this.start = (225 * Math.PI) / 180;\r\n    this.radius = 300;\r\n    this.xcenter = window.innerWidth / 2;\r\n    this.ycenter = 400;\r\n    this.step = 0.05;\r\n    this.intervalTime = 100;\r\n\r\n    this.state = {\r\n      hoveredColor: \"none\",\r\n      topVal: 0,\r\n      leftVal: 0\r\n    };\r\n\r\n    this.getTop = this.getTop.bind(this);\r\n    this.getLeft = this.getLeft.bind(this);\r\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.moveit = this.moveit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(this.moveit, this.intervalTime);\r\n    console.log(\"test\");\r\n  }\r\n  componentDidUpdate() {\r\n    this.start = (225 * Math.PI) / 180;\r\n  }\r\n\r\n  moveit() {\r\n    let circles = document.querySelectorAll(\".color-circle\");\r\n\r\n    circles.forEach(circle => {\r\n      let prevPos = parseFloat(circle.dataset.pos); // convert the current pos to a float\r\n      let pos = prevPos + this.step; // add step to pos\r\n      circle.setAttribute(\"data-pos\", pos); // store pos in the circle's dataset\r\n\r\n      let topVal = Math.floor(this.ycenter + this.radius * Math.sin(pos));\r\n      circle.style.top = topVal + \"px\"; // set the circle's top property to new value\r\n\r\n      let leftVal = Math.floor(this.xcenter + this.radius * Math.cos(pos));\r\n      circle.style.left = leftVal + \"px\"; // set the circle's left property to new value\r\n    });\r\n  }\r\n\r\n  // get the top property for the current circle's style\r\n  getTop() {\r\n    this.start = this.start + this.spacing; // adds spacing so that the next circle gets placed appropriately\r\n    let top = Math.floor(this.ycenter + this.radius * Math.sin(this.start));\r\n    return top;\r\n  }\r\n  // get the left property for the current circle's style\r\n  getLeft() {\r\n    let left = Math.floor(this.xcenter + this.radius * Math.cos(this.start));\r\n    return left;\r\n  }\r\n\r\n  // on mouse-over, set the state of hoverColor to the color being moused over so it can be passed as a prop to StageInfo\r\n  handleMouseEnter(e) {\r\n    this.setState({\r\n      hoveredColor: e.target.name\r\n    });\r\n    document.querySelector(\".color-info\").style.opacity = 1;\r\n    clearInterval(this.interval);\r\n  }\r\n  handleMouseLeave(e) {\r\n    this.setState({\r\n      hoveredColor: \"none\"\r\n    });\r\n    document.querySelector(\".color-info\").style.opacity = 0;\r\n    this.interval = setInterval(this.moveit, this.intervalTime);\r\n  }\r\n\r\n  render() {\r\n    let colors = [\r\n      \"beige\",\r\n      \"purple\",\r\n      \"red\",\r\n      \"blue\",\r\n      \"orange\",\r\n      \"green\",\r\n      \"yellow\",\r\n      \"turquoise\"\r\n    ];\r\n\r\n    // loop through each color and retrieve the correct image and call getTop() and getLeft() to determine its placement\r\n    let images = colors.map(color => {\r\n      // replaced call to getTop and getLeft in style of each img with this stuff (might be worse)\r\n      this.start = this.start + this.spacing; // adds spacing so that the next circle gets placed appropriately\r\n      let topVal = Math.floor(\r\n        this.ycenter + this.radius * Math.sin(this.start)\r\n      );\r\n      let leftVal = Math.floor(\r\n        this.xcenter + this.radius * Math.cos(this.start)\r\n      );\r\n\r\n      return (\r\n        <img\r\n          className=\"color-circle\"\r\n          name={color}\r\n          key={color}\r\n          data-pos={this.start} // store position of each circle for use in spin function\r\n          src={require(`./images/${color}-circle.png`)}\r\n          alt={color}\r\n          // style={{ top: this.getTop(), left: this.getLeft() }}\r\n          style={{ top: topVal, left: leftVal }}\r\n          onMouseEnter={this.handleMouseEnter}\r\n          onMouseLeave={this.handleMouseLeave}\r\n        />\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <div>{images}</div>\r\n        <StageInfo color={this.state.hoveredColor} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Circles;\r\n","import React, { Component } from \"react\";\nimport Circles from \"./Circles\";\nimport \"./App.css\";\nimport Fade from \"react-reveal/Fade\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Fade>\n          <Circles />\n        </Fade>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}